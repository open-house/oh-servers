#!/usr/bin/perl
use strict;
use warnings;
use 5.010;
use autodie;
use Net::Ping;
use lib ("./lib");
use Rackspace;

#
# VARIABLES
#

# Source environment variables by parsing config file
my $conf = "$ENV{HOME}/.novarc";
open my $fh, "<", $conf;
while (<$fh>) {
    chomp;
    next unless /=/;
    my($k, $v) = split /=/, $_, 2;
    $ENV{$k} = $v;
}

# Environment variables shared vith nova via .novarc
my $USERNAME = $ENV{OS_USERNAME};
my $API_KEY  = $ENV{OS_PASSWORD};

#
# MAIN
#

my $cmd      = shift;
my $hostname = shift;
die "Usage: $0 create | delete <hostname>\n"
  unless defined $cmd and defined $hostname;

my ( $account, $token ) = authenticate( $USERNAME, $API_KEY );

given ($cmd) {
    when (/^create$/) {
        my ( $pass, $id ) = create_server( $account, $token, $hostname );

        my $n = 0;
        while (1) {

            # redo comes here
            my $perl_ds = list_servers( $account, $token );
            my $server = ${ $perl_ds->{servers} }[ $n++ ];
            unless ($server->{id} eq $id
                and $server->{'OS-EXT-STS:vm_state'} eq 'active' )
            {
                print STDERR $server->{name} . " - "
                  . $server->{'OS-EXT-STS:vm_state'} . " ("
                  . $server->{progress} . " %)\n";
                sleep 10;
                $n = 0 if $n >= @{ $perl_ds->{servers} };
                redo;
            }
            last;    # exit infinite while loop
        }

        # Get IP address (not ready immediately after VM is active?)
        my $ip = 0;
        until ( $ip =~ /^\d+\.\d+\.\d+\.\d+$/ ) {
            $ip = get_server_ip( $account, $token, $id );
            sleep 3;
        }

        # Make sure the host is up
        my $p = Net::Ping->new("syn");
        sleep(3) until $p->ping($ip);
        $p->close();

        # the only print to STDOUT - will be use by the wrapper script!
        print $ip;
    }
    when (/^delete$/) { delete_server( $account, $token, $hostname ) }
    default { print STDERR "Uknown command '$cmd'.\n" }
}

