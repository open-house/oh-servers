#!/usr/bin/perl
use strict;
use warnings;
use Net::SSH qw(ssh_cmd);

my $host    = shift;
my $release = shift;

die "Usage: $0 <host> <ubuntu_release>\n" unless $host and $release;

use FindBin qw($Bin);
my $script_dir = $Bin;

#<<<  do not let perltidy touch this
my %steps = (
    a_upgrade => [
        'DEBIAN_FRONTEND=noninteractive apt-get update && apt-get -y upgrade',
    ],
    b_puppet_master => [
        "wget http://apt.puppetlabs.com/puppetlabs-release-$release.deb",
        "DEBIAN_FRONTEND=noninteractive dpkg -i puppetlabs-release-$release.deb",
        'DEBIAN_FRONTEND=noninteractive apt-get -y install puppetmaster',
    ],
    c_puppet_client => [
        "wget http://apt.puppetlabs.com/puppetlabs-release-$release.deb",
        "DEBIAN_FRONTEND=noninteractive dpkg -i puppetlabs-release-$release.deb",
        'DEBIAN_FRONTEND=noninteractive apt-get -y install puppet',
    ],
    d_puppet_mysql => [
        "puppet module install puppetlabs/mysql",
        "LOCAL scp $script_dir/manifests/mysql.pp root\@$host:/etc/puppet/manifests/",
        "puppet apply /etc/puppet/manifests/mysql.pp",
    ],
);
#>>>

for my $step ( sort keys %steps ) {
    print "==> Running step '$step'\n";
    for my $cmd ( @{ $steps{$step} } ) {
        if ( $cmd =~ /^LOCAL/ ) {
            $cmd =~ s/^LOCAL\s+//;    # remove tag
            print "--> Running LOCAL command '$cmd'\n";
            eval { system $cmd };
            print "Continuing after error: $@" if $@;
        } else {
            print "--> Running REMOTE command '$cmd'\n";
            eval { ssh_cmd( "root\@$host", $cmd ); };
            print "Continuing after error: $@" if $@;
        }
    }
}

exit 0;
